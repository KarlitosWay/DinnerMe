@page "/adddinner"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using DinnerMe.Model

<h3>Add Dinner</h3>

<div>
    <EditForm EditContext=@editContext OnValidSubmit=Add>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-field">
            <label>Name:</label>
            <div>
                <InputText @bind-Value="newDinner.name" />
            </div>
        </div>

        <div class="form-field">
            <label>Description:</label>
            <div>
                <InputText @bind-Value="newDinner.description" />
            </div>
        </div>

        <div class="form-field">
            <label>Method:</label>
            <div>
                <InputTextArea @bind-Value="newDinner.method" />
            </div>
        </div>

        <div class="form-field">
            <label>Notes:</label>
            <div>
                <InputTextArea @bind-Value="newDinner.notes" />
            </div>
        </div>

        <div class="form-field">
            <label>Add ingredient:</label>
            <div>
                <InputText @bind-Value="searchIngredient" @oninput="SearchIngredients" />
                @if (matchingIngredients != null && matchingIngredients.Any())
                {
                    <ul>
                        @foreach (var ingredient in matchingIngredients)
                        {
                            <li style="list-style-type: none;">
                                <span style="cursor:pointer" @onclick="() => AddDinnerIngredient(ingredient)">
                                    <strong>+</strong> @ingredient.name
                                </span>
                                <input type="number" step="any" min="0" placeholder="Quantity" @bind="ingredientQuantity" />
                            </li>
                        }
                    </ul>
                }
            </div>
        </div>

        <div>
            <label>Added Ingredients:</label>
            <ul>
                @foreach (var mealIngredient in newDinner.ingredients)
                {
                    <li>@mealIngredient.ingredient.name - @mealIngredient.quantity</li>
                }
            </ul>
        </div>

        <div class="form-field">
            <label>New Ingredient Name:</label>
            <InputText @bind-Value="newIngredientName" />
        </div>

        <div class="form-field">
            <label>Measurement Type:</label>
            <select @bind="newIngredientMeasurement">
                @foreach (var measurementType in Enum.GetValues(typeof(Ingredient.UnitOfMeasurement)))
                {
                    <option value="@measurementType">@measurementType.ToString()</option>
                }
            </select>
        </div>

        <button type="button" @onclick="CreateIngredient">Create Ingredient</button>

        <div class="form-group">
            <label for="body">Select categories: </label>

            @foreach (var category in categories)
            {
                <InputCheckbox @bind-Value=category.selected />
                @category.name
            }

            <div>
                <label>New Category Name:</label>
                <InputText @bind-Value="newCategoryName" />
                <button type="button" @onclick="AddCategory">Add Category</button>
            </div>
        </div>

        <button type="Submit">
            Add dinner
        </button>

    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</div>

@code {
    private EditContext editContext;
    private Dinner newDinner = new Dinner();
    private List<Category> categories = new();
    private string newCategoryName;
    private string errorMessage;

    private string searchIngredient;
    private List<Ingredient> matchingIngredients = new List<Ingredient>();

    private string newIngredientName;
    private Ingredient.UnitOfMeasurement newIngredientMeasurement;

    private List<Ingredient> ingredients;

    private string ingredientQuantity;

    private async Task CreateIngredient()
    {
        if (!string.IsNullOrWhiteSpace(newIngredientName))
        {
            var newIngredient = new Ingredient { name = newIngredientName, measurement = newIngredientMeasurement };
            var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}dinners/addingredient", newIngredient);
            if (!response.IsSuccessStatusCode)
            {
                // Handle error
                errorMessage = "ERROR: Failed to add ingredient. Response: " + await response.Content.ReadAsStringAsync();
            }

            // Reload ingredients
            await LoadIngredients();


            // Clear the fields after creating the ingredient
            newIngredientName = string.Empty;
            newIngredientMeasurement = Ingredient.UnitOfMeasurement.Whole;
        }
    }

    private async Task SearchIngredients(ChangeEventArgs e)
    {
        string searchTerm = e.Value?.ToString();
        if (!string.IsNullOrEmpty(searchTerm))
        {
            matchingIngredients = ingredients.Where(i => i.name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        else
        {
            matchingIngredients.Clear();
        }
    }

    private void AddDinnerIngredient(Ingredient ingredient)
    {
        // Add the selected ingredient to the dinner's list of ingredients
        var mealIngredient = new MealIngredient
            {
                ingredient = ingredient,
                quantity = ingredientQuantity
            };
        newDinner.ingredients.Add(mealIngredient);
        searchIngredient = string.Empty; // Clear the input field after selecting an ingredient
        matchingIngredients.Clear(); // Clear the matching ingredients list
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        await LoadIngredients();
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(newDinner);

        base.OnInitialized();
    }

    private async Task LoadCategories()
    {
        categories = await HttpClient.GetFromJsonAsync<List<Category>>(NavigationManager.BaseUri + "dinners/getcategories");
    }

    private async Task LoadIngredients()
    {
        ingredients = await HttpClient.GetFromJsonAsync<List<Ingredient>>(NavigationManager.BaseUri + "dinners/getingredients");
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            // Create a new category with the provided name
            var newCategory = new Category { name = newCategoryName, selected = false };
            var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}dinners/addcategory", newCategory);
            if (!response.IsSuccessStatusCode)
            {
                // Handle error
                errorMessage = "ERROR: Failed to add category. Response: " + await response.Content.ReadAsStringAsync();
            }

            // Reload categories
            await LoadCategories();

            newCategoryName = string.Empty; // Clear the input field after adding the category
        }
    }

    private async Task Add()
    {
        // Add selected categories to the dinner
        List<Category> dinner_categories = new();
        foreach (var category in categories)
        {
            if (category.selected)
            {
                dinner_categories.Add(category);
            }
        }
        newDinner.categories = dinner_categories;

        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}dinners/adddinner", newDinner);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/browsemeals");
        }
        else
        {
            // Handle error
            errorMessage = "ERROR: Failed to add dinner. Response: " + await response.Content.ReadAsStringAsync();
        }
    }
}
