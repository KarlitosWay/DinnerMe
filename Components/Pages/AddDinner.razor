@page "/adddinner"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@using DinnerMe.Model


<h3>Add Dinner</h3>

<div>
    <EditForm EditContext=@editContext OnValidSubmit=Add>
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-field">
            <label>Name:</label>
            <div>
                <InputText @bind-Value="newDinner.name" />
            </div>
        </div>

        <div class="form-field">
            <label>Description:</label>
            <div>
                <InputText @bind-Value="newDinner.description" />
            </div>
        </div>

        <div class="form-field">
            <label>Method:</label>
            <div>
                <InputTextArea @bind-Value="newDinner.method" />
            </div>
        </div>

        <div class="form-field">
            <label>Notes:</label>
            <div>
                <InputTextArea @bind-Value="newDinner.notes" />
            </div>
        </div>

        <div class="form-group">
            <label for="body">Select categories: </label>

            @foreach (var category in categories)
            {
                <InputCheckbox @bind-Value=category.selected />
                @category.name
            }

            <div>
                <label>New Category Name:</label>
                <InputText @bind-Value="newCategoryName" />
                <button type="button" @onclick="AddCategory">Add Category</button>
            </div>
        </div>

        <button type="Submit">
            Add dinner
        </button>

    </EditForm>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">@errorMessage</div>
    }
</div>

@code {
    private EditContext editContext;
    private Dinner newDinner = new Dinner();
    private List<Category> categories = new List<Category>();
    private string newCategoryName;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    protected override void OnInitialized()
    {
        editContext = new EditContext(newDinner);

        base.OnInitialized();
    }

    private async Task LoadCategories()
    {
        categories = await HttpClient.GetFromJsonAsync<List<Category>>(NavigationManager.BaseUri + "dinners/getcategories");
    }

    private async Task AddCategory()
    {
        if (!string.IsNullOrWhiteSpace(newCategoryName))
        {
            // Create a new category with the provided name
            var newCategory = new Category { name = newCategoryName, selected = false };
            var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}dinners/addcategory", newCategory);
            if (!response.IsSuccessStatusCode)
            {
                // Handle error
                errorMessage = "ERROR: Failed to add category. Response: " + await response.Content.ReadAsStringAsync();
            }

            // Reload categories
            await LoadCategories();
        }
    }

    private async Task Add()
    {
        // Add selected categories to the dinner
        List<Category> dinner_categories = new();
        foreach (var category in categories)
        {
            if (category.selected)
            {
                dinner_categories.Add(category);
            }
        }
        newDinner.categories = dinner_categories;

        var response = await HttpClient.PostAsJsonAsync($"{NavigationManager.BaseUri}dinners/adddinner", newDinner);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/browsemeals");
        }
        else
        {
            // Handle error
            errorMessage = "ERROR: Failed to add dinner. Response: " + await response.Content.ReadAsStringAsync();
        }
    }
}
